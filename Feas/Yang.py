# Ridesharing Problem
# This model is designed to find the assignment among vehicles and requests.
import pyomo.environ as pyo
from pyomo.opt import SolverFactory

# Create the Pyomo model
model = pyo.ConcreteModel()

#%% Define Sets
model.R = pyo.Set(initialize=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                              11, 12, 13, 14, 15, 16, 17, 18, 19, 20], doc="Requests")
model.V = pyo.Set(initialize=['v1', 'v2', 'v3', 'v4', 'v5', 'v6', 'v7', 'v8'], doc="Vehicles")
model.paths = pyo.Set(initialize=['A','B','C'], doc="Paths")
model.L = pyo.Set(initialize=['l1','l2', 'l3'], doc="Link")
model.h = pyo.Set(initialize=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], doc="horizon index set")
model.d = pyo.Set(initialize=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                              11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                              21, 22, 23, 24, 25, 26, 27, 28, 29], doc="DNL horizon index set")

#%% Define parameters
model.Vr = pyo.Param(model.R, initialize={1: ['v1', 'v2', 'v3'], 2: ['v2', 'v3'], 3: ['v1'], 4: ['v2', 'v5'], 5: ['v1', 'v7'],
                                          6: ['v2', 'v5'], 7: ['v5', 'v1'], 8: ['v4', 'v7'], 9: ['v8'], 10: ['v8'],
                                          11: ['v5'], 12: ['v4'], 13: ['v8'], 14: ['v8'], 15: ['v6'],
                                          16: ['v6'], 17: ['v1'], 18: ['v6'], 19: ['v8','v2'], 20: ['v7']}, doc="Potential vehicles for each request", mutable=True, within=pyo.Any)
model.beta = pyo.Param(model.V, model.R, model.paths, initialize = {
    ('v1', 1, 'A'): 26, ('v1', 1, 'B'): 19, ('v1', 1, 'C'): 21, ('v1', 2, 'A'): 10000, ('v1', 2, 'B'): 10000, ('v1', 2, 'C'): 10000, ('v1', 3, 'A'): 28,('v1', 3, 'B'): 14,('v1', 3, 'C'): 26, ('v1', 4, 'A'): 10000, ('v1', 4, 'B'): 10000, ('v1', 4, 'C'): 10000, ('v1', 5, 'A'): 18,('v1', 5, 'B'): 24,('v1', 5, 'C'): 6, ('v1', 6, 'A'): 10000, ('v1', 6, 'B'): 10000, ('v1', 6, 'C'): 10000,('v1', 7, 'A'): 17,('v1', 7, 'B'): 25,('v1', 7, 'C'): 7, ('v1', 8, 'A'): 10000, ('v1', 8, 'B'): 10000, ('v1', 8, 'C'): 10000, ('v1', 9, 'A'): 10000, ('v1', 9, 'B'): 10000, ('v1', 9, 'C'): 10000, ('v1',10, 'A'): 10000, ('v1', 10, 'B'): 10000, ('v1', 10, 'C'): 10000,
    ('v1',11, 'A'): 10000, ('v1', 11, 'B'): 10000, ('v1', 11, 'C'): 10000, ('v1',12, 'A'): 10000, ('v1', 12, 'B'): 10000, ('v1', 12, 'C'): 10000, ('v1',13, 'A'): 10000, ('v1', 13, 'B'): 10000, ('v1', 13, 'C'): 10000, ('v1',14, 'A'): 10000, ('v1', 14, 'B'): 10000, ('v1', 14, 'C'): 10000, ('v1',15, 'A'): 10000, ('v1', 15, 'B'): 10000, ('v1', 15, 'C'): 10000, ('v1',16, 'A'): 10000, ('v1', 16, 'B'): 10000, ('v1', 16, 'C'): 10000, ('v1', 17, 'A'): 17,('v1', 17, 'B'): 25,('v1', 17, 'C'): 7, ('v1',18, 'A'): 10000, ('v1', 18, 'B'): 10000, ('v1', 18, 'C'): 10000, ('v1',19, 'A'): 10000, ('v1', 19, 'B'): 10000, ('v1', 19, 'C'): 10000, ('v1', 20, 'A'): 10000, ('v1', 20, 'B'): 10000, ('v1', 20, 'C'): 10000, 
    ('v2', 1, 'A'): 12, ('v2', 1, 'B'): 15, ('v2', 1, 'C'): 27, ('v2', 2, 'A'): 30,('v2', 2, 'B'): 15, ('v2', 2, 'C'): 24, ('v2', 3, 'A'): 10000,('v2', 3, 'B'): 10000, ('v2', 3, 'C'): 10000, ('v2', 4, 'A'): 10,('v2', 4, 'B'): 15, ('v2', 4, 'C'): 20, ('v2', 5, 'A'): 10000,('v2', 5, 'B'): 10000, ('v2',5, 'C'): 10000, ('v2', 6, 'A'): 12,('v2', 6, 'B'): 16, ('v2', 6, 'C'): 21, ('v2', 7, 'A'): 10000,('v2', 7, 'B'): 10000, ('v2',7, 'C'): 10000, ('v2', 8, 'A'): 10000,('v2', 8, 'B'): 10000, ('v2',8, 'C'): 10000, ('v2', 9, 'A'): 10000,('v2',9, 'B'): 10000, ('v2',9, 'C'): 10000, ('v2', 10, 'A'): 10000,('v2', 10, 'B'): 10000, ('v2',10, 'C'): 10000,
    ('v2', 11, 'A'): 10000,('v2', 11, 'B'): 10000, ('v2',11, 'C'): 10000, ('v2',12, 'A'): 10000, ('v2', 12, 'B'): 10000, ('v2', 12, 'C'): 10000, ('v2',13, 'A'): 10000, ('v2', 13, 'B'): 10000, ('v2', 13, 'C'): 10000, ('v2',14, 'A'): 10000, ('v2', 14, 'B'): 10000, ('v2', 14, 'C'): 10000, ('v2',15, 'A'): 10000, ('v2', 15, 'B'): 10000, ('v2', 15, 'C'): 10000, ('v2',16, 'A'): 10000, ('v2', 16, 'B'): 10000, ('v2', 16, 'C'): 10000, ('v2', 17, 'A'): 10000,('v2', 17, 'B'): 10000,('v2', 17, 'C'): 10000, ('v2',18, 'A'): 10000, ('v2', 18, 'B'): 10000, ('v2', 18, 'C'): 10000, ('v2',19, 'A'): 13, ('v2', 19, 'B'): 15, ('v2', 19, 'C'): 28, ('v2', 20, 'A'): 10000, ('v2', 20, 'B'): 10000, ('v2', 20, 'C'): 10000, 
    ('v3', 1, 'A'): 20,('v3', 1, 'B'): 10, ('v3', 1, 'C'): 5,('v3', 2, 'A'): 23,('v3', 2, 'B'): 19, ('v3', 2, 'C'): 21,('v3', 3, 'A'): 10000, ('v3', 3, 'B'): 10000, ('v3', 3, 'C'): 10000, ('v3', 4, 'A'): 10000, ('v3', 4, 'B'): 10000, ('v3', 4, 'C'): 10000, ('v3', 5, 'A'): 10000, ('v3', 5, 'B'): 10000, ('v3', 5, 'C'): 10000, ('v3', 6, 'A'): 10000, ('v3', 6, 'B'): 10000, ('v3', 6, 'C'): 10000, ('v3', 7, 'A'): 10000, ('v3', 7, 'B'): 10000, ('v3', 7, 'C'): 10000, ('v3', 8, 'A'): 10000, ('v3', 8, 'B'): 10000, ('v3', 8, 'C'): 10000, ('v3', 9, 'A'): 10000, ('v3', 9, 'B'): 10000, ('v3', 9, 'C'): 10000, ('v3', 10, 'A'): 10000, ('v3', 10, 'B'): 10000, ('v3', 10, 'C'): 10000, 
    ('v3', 11, 'A'): 10000, ('v3', 11, 'B'): 10000, ('v3', 11, 'C'): 10000, ('v3', 12, 'A'): 10000, ('v3', 12, 'B'): 10000, ('v3', 12, 'C'): 10000, ('v3', 13, 'A'): 10000, ('v3', 13, 'B'): 10000, ('v3', 13, 'C'): 10000, ('v3', 14, 'A'): 10000, ('v3', 14, 'B'): 10000, ('v3', 14, 'C'): 10000, ('v3', 15, 'A'): 10000, ('v3', 15, 'B'): 10000, ('v3', 15, 'C'): 10000, ('v3', 16, 'A'): 10000, ('v3', 16, 'B'): 10000, ('v3', 16, 'C'): 10000,  ('v3', 17, 'A'): 10000, ('v3', 17, 'B'): 10000, ('v3', 17, 'C'): 10000, ('v3', 18, 'A'): 10000, ('v3', 18, 'B'): 10000, ('v3', 18, 'C'): 10000, ('v3', 19, 'A'): 10000, ('v3', 19, 'B'): 10000, ('v3', 19, 'C'): 10000, ('v3', 20, 'A'): 10000, ('v3', 20, 'B'): 10000, ('v3', 20, 'C'): 10000, 
    ('v4', 1, 'A'): 10000,('v4', 1, 'B'): 10000, ('v4', 1, 'C'): 10000,('v4', 2, 'A'): 10000,('v4', 2, 'B'): 10000, ('v4', 2, 'C'): 10000,('v4', 3, 'A'): 10000,('v4', 3, 'B'): 10000, ('v4', 3, 'C'): 10000,('v4', 4, 'A'): 10000,('v4', 4, 'B'): 10000, ('v4', 4, 'C'): 10000,('v4', 5, 'A'): 10000,('v4', 5, 'B'): 10000, ('v4', 5, 'C'): 10000,('v4', 6, 'A'): 10000,('v4', 6, 'B'): 10000, ('v4', 6, 'C'): 10000,('v4', 7, 'A'): 10000,('v4', 7, 'B'): 10000, ('v4', 7, 'C'): 10000,('v4', 8, 'A'): 12,('v4', 8, 'B'): 20, ('v4', 8, 'C'): 16, ('v4', 9, 'A'): 10000,('v4', 9, 'B'): 10000, ('v4', 9, 'C'): 10000, ('v4', 10, 'A'): 10000,('v4', 10, 'B'): 10000, ('v4', 10, 'C'): 10000,
    ('v4', 11, 'A'): 10000,('v4', 11, 'B'): 10000, ('v4', 11, 'C'): 10000, ('v4', 12, 'A'): 21,('v4', 12, 'B'): 26, ('v4', 12, 'C'): 5, ('v4', 13, 'A'): 10000,('v4', 13, 'B'): 10000, ('v4', 13, 'C'): 10000,('v4', 14, 'A'): 10000,('v4', 14, 'B'): 10000, ('v4', 14, 'C'): 10000,('v4', 15, 'A'): 10000,('v4', 15, 'B'): 10000, ('v4', 15, 'C'): 10000,('v4', 16, 'A'): 10000,('v4', 16, 'B'): 10000, ('v4', 16, 'C'): 10000,('v4', 17, 'A'): 10000,('v4', 17, 'B'): 10000, ('v4', 17, 'C'): 10000,('v4', 18, 'A'): 10000,('v4', 18, 'B'): 10000, ('v4', 18, 'C'): 10000,('v4', 19, 'A'): 10000,('v4', 19, 'B'): 10000, ('v4', 19, 'C'): 10000,('v4', 20, 'A'): 10000,('v4', 20, 'B'): 10000, ('v4', 20, 'C'): 10000,
    ('v5', 1, 'A'): 10000,('v5', 1, 'B'): 10000, ('v5', 1, 'C'): 10000,('v5', 2, 'A'): 10000,('v5', 2, 'B'): 10000, ('v5', 2, 'C'): 10000,('v5', 3, 'A'): 10000,('v5', 3, 'B'): 10000, ('v5', 3, 'C'): 10000,('v5', 4, 'A'): 20,('v5', 4, 'B'): 16, ('v5', 4, 'C'): 18,('v5', 5, 'A'): 10000,('v5', 5, 'B'): 10000, ('v5', 5, 'C'): 10000,('v5', 6, 'A'): 30,('v5', 6, 'B'): 14, ('v5', 6, 'C'): 15,('v5', 7, 'A'): 12,('v5', 7, 'B'): 13, ('v5', 7, 'C'): 14,('v5', 8, 'A'): 10000,('v5', 8, 'B'): 10000, ('v5', 8, 'C'): 10000, ('v5', 9, 'A'): 10000,('v5', 9, 'B'): 10000, ('v5', 9, 'C'): 10000, ('v5', 10, 'A'): 10000,('v5', 10, 'B'): 10000, ('v5', 10, 'C'): 10000,
    ('v5', 11, 'A'): 21,('v5', 11, 'B'): 19, ('v5', 11, 'C'): 17, ('v5', 12, 'A'): 10000,('v5', 12, 'B'): 10000, ('v5', 12, 'C'): 10000, ('v5', 13, 'A'): 10000,('v5', 13, 'B'): 10000, ('v5', 13, 'C'): 10000,('v5', 14, 'A'): 10000,('v5', 14, 'B'): 10000, ('v5', 14, 'C'): 10000,('v5', 15, 'A'): 10000,('v5', 15, 'B'): 10000, ('v5', 15, 'C'): 10000,('v5', 16, 'A'): 10000,('v5', 16, 'B'): 10000, ('v5', 16, 'C'): 10000,('v5', 17, 'A'): 10000,('v5', 17, 'B'): 10000, ('v5', 17, 'C'): 10000,('v5', 18, 'A'): 10000,('v5', 18, 'B'): 10000, ('v5', 18, 'C'): 10000,('v5', 19, 'A'): 10000,('v5', 19, 'B'): 10000, ('v5', 19, 'C'): 10000,('v5', 20, 'A'): 10000,('v5', 20, 'B'): 10000, ('v5', 20, 'C'): 10000,
    ('v6', 1, 'A'): 10000,('v6', 1, 'B'): 10000, ('v6', 1, 'C'): 10000,('v6', 2, 'A'): 10000,('v6', 2, 'B'): 10000, ('v6', 2, 'C'): 10000,('v6', 3, 'A'): 10000,('v6', 3, 'B'): 10000, ('v6', 3, 'C'): 10000,('v6', 4, 'A'): 10000,('v6', 4, 'B'): 10000, ('v6', 4, 'C'): 10000,('v6', 5, 'A'): 10000,('v6', 5, 'B'): 10000, ('v6', 5, 'C'): 10000,('v6', 6, 'A'): 10000,('v6', 6, 'B'): 10000, ('v6', 6, 'C'): 10000,('v6', 7, 'A'): 10000,('v6', 7, 'B'): 10000, ('v6', 7, 'C'): 10000,('v6', 8, 'A'): 10000,('v6', 8, 'B'): 10000, ('v6', 8, 'C'): 10000, ('v6', 9, 'A'): 10000,('v6', 9, 'B'): 10000, ('v6', 9, 'C'): 10000, ('v6', 10, 'A'): 10000,('v6', 10, 'B'): 10000, ('v6', 10, 'C'): 10000,
    ('v6', 11, 'A'): 10000,('v6', 11, 'B'): 10000, ('v6', 11, 'C'): 10000, ('v6', 12, 'A'): 10000,('v6', 12, 'B'): 10000, ('v6', 12, 'C'): 10000, ('v6', 13, 'A'): 10000,('v6', 13, 'B'): 10000, ('v6', 13, 'C'): 10000,('v6', 14, 'A'): 10000,('v6', 14, 'B'): 10000, ('v6', 14, 'C'): 10000,('v6', 15, 'A'): 8,('v6', 15, 'B'): 9, ('v6', 15, 'C'): 13,('v6', 16, 'A'): 25,('v6', 16, 'B'): 24, ('v6', 16, 'C'): 23,('v6', 17, 'A'): 10000,('v6', 17, 'B'): 10000, ('v6', 17, 'C'): 10000,('v6', 18, 'A'): 13,('v6', 18, 'B'): 12, ('v6', 18, 'C'): 11,('v6', 19, 'A'): 10000,('v6', 19, 'B'): 10000, ('v6', 19, 'C'): 10000,('v6', 20, 'A'): 10000,('v6', 20, 'B'): 10000, ('v6', 20, 'C'): 10000,
    ('v7', 1, 'A'): 10000,('v7', 1, 'B'): 10000, ('v7', 1, 'C'): 10000,('v7', 2, 'A'): 10000,('v7', 2, 'B'): 10000, ('v7', 2, 'C'): 10000,('v7', 3, 'A'): 10000,('v7', 3, 'B'): 10000, ('v7', 3, 'C'): 10000,('v7', 4, 'A'): 10000,('v7', 4, 'B'): 10000, ('v7', 4, 'C'): 10000,('v7', 5, 'A'): 10,('v7', 5, 'B'): 8, ('v7', 5, 'C'): 9,('v7', 6, 'A'): 10000,('v7', 6, 'B'): 10000, ('v7', 6, 'C'): 10000,('v7', 7, 'A'): 10000,('v7', 7, 'B'): 10000, ('v7', 7, 'C'): 10000,('v7', 8, 'A'): 17,('v7', 8, 'B'): 16, ('v7', 8, 'C'): 15, ('v7', 9, 'A'): 10000,('v7', 9, 'B'): 10000, ('v7', 9, 'C'): 10000, ('v7', 10, 'A'): 10000,('v7', 10, 'B'): 10000, ('v7', 10, 'C'): 10000,
    ('v7', 11, 'A'): 10000,('v7', 11, 'B'): 10000, ('v7', 11, 'C'): 10000, ('v7', 12, 'A'): 10000,('v7', 12, 'B'): 10000, ('v7', 12, 'C'): 10000, ('v7', 13, 'A'): 10000,('v7', 13, 'B'): 10000, ('v7', 13, 'C'): 10000,('v7', 14, 'A'): 10000,('v7', 14, 'B'): 10000, ('v7', 14, 'C'): 10000,('v7', 15, 'A'): 10000,('v7', 15, 'B'): 10000, ('v7', 15, 'C'): 10000,('v7', 16, 'A'): 10000,('v7', 16, 'B'): 10000, ('v7', 16, 'C'): 10000,('v7', 17, 'A'): 10000,('v7', 17, 'B'): 10000, ('v7', 17, 'C'): 10000,('v7', 18, 'A'): 10000,('v7', 18, 'B'): 10000, ('v7', 18, 'C'): 10000,('v7', 19, 'A'): 10000,('v7', 19, 'B'): 10000, ('v7', 19, 'C'): 10000,('v7', 20, 'A'): 27,('v7', 20, 'B'): 28, ('v7', 20, 'C'): 29,
    ('v8', 1, 'A'): 10000,('v8', 1, 'B'): 10000, ('v8', 1, 'C'): 10000,('v8', 2, 'A'): 10000,('v8', 2, 'B'): 10000, ('v8', 2, 'C'): 10000,('v8', 3, 'A'): 10000,('v8', 3, 'B'): 10000, ('v8', 3, 'C'): 10000,('v8', 4, 'A'): 10000,('v8', 4, 'B'): 10000, ('v8', 4, 'C'): 10000,('v8', 5, 'A'): 10000,('v8', 5, 'B'): 10000, ('v8', 5, 'C'): 10000,('v8', 6, 'A'): 10000,('v8', 6, 'B'): 10000, ('v8', 6, 'C'): 10000,('v8', 7, 'A'): 10000,('v8', 7, 'B'): 10000, ('v8', 7, 'C'): 10000,('v8', 8, 'A'): 17,('v8', 8, 'B'): 16, ('v8', 8, 'C'): 15, ('v8', 9, 'A'): 30,('v8', 9, 'B'): 28, ('v8', 9, 'C'): 16, ('v8', 10, 'A'): 5,('v8', 10, 'B'): 8, ('v8', 10, 'C'): 20,
    ('v8', 11, 'A'): 10000,('v8', 11, 'B'): 10000, ('v8', 11, 'C'): 10000, ('v8', 12, 'A'): 10000,('v8', 12, 'B'): 10000, ('v8', 12, 'C'): 10000, ('v8', 13, 'A'): 14,('v8', 13, 'B'): 15, ('v8', 13, 'C'): 16,('v8', 14, 'A'): 7,('v8', 14, 'B'): 8, ('v8', 14, 'C'): 10,('v8', 15, 'A'): 10000,('v8', 15, 'B'): 10000, ('v8', 15, 'C'): 10000,('v8', 16, 'A'): 10000,('v8', 16, 'B'): 10000, ('v8', 16, 'C'): 10000,('v8', 17, 'A'): 10000,('v8', 17, 'B'): 10000, ('v8', 17, 'C'): 10000,('v8', 18, 'A'): 10000,('v8', 18, 'B'): 10000, ('v8', 18, 'C'): 10000,('v8', 19, 'A'): 8,('v8', 19, 'B'): 6, ('v8', 19, 'C'): 25,('v8', 20, 'A'): 10000,('v8', 20, 'B'): 10000, ('v8', 20, 'C'): 10000
    }, doc="beta for each link", mutable=True)

model.Cl = pyo.Param(model.L, initialize={'l1': 9, 'l2': 10, 'l3': 9}, doc="capacity for each link", mutable=True)
model.rho = pyo.Param(model.L, model.h, initialize={('l1', 0): 0.02894736842105263,
                                                    ('l1', 1): 0.02894736842105263,
                                                    ('l1', 2): 0.02894736842105263,
                                                    ('l1', 3): 0.02894736842105263,
                                                    ('l1', 4): 0.02894736842105263,
                                                    ('l1', 5): 0.02894736842105263,
                                                    ('l1', 6): 0.02894736842105263,
                                                    ('l1', 7): 0.02894736842105263,
                                                    ('l1', 8): 0.02894736842105263,
                                                    ('l1', 9): 0.02894736842105263,
                                                    ('l2', 0): 0.03289473684210526,
                                                    ('l2', 1): 0.03289473684210526,
                                                    ('l2', 2): 0.03289473684210526,
                                                    ('l2', 3): 0.03289473684210526,
                                                    ('l2', 4): 0.03289473684210526,
                                                    ('l2', 5): 0.03289473684210526,
                                                    ('l2', 6): 0.03289473684210526,
                                                    ('l2', 7): 0.03289473684210526,
                                                    ('l2', 8): 0.03289473684210526,
                                                    ('l2', 9): 0.03289473684210526,
                                                    ('l3', 0): 0.038157894736842106,
                                                    ('l3', 1): 0.038157894736842106,
                                                    ('l3', 2): 0.038157894736842106,
                                                    ('l3', 3): 0.038157894736842106,
                                                    ('l3', 4): 0.038157894736842106,
                                                    ('l3', 5): 0.038157894736842106,
                                                    ('l3', 6): 0.038157894736842106,
                                                    ('l3', 7): 0.038157894736842106,
                                                    ('l3', 8): 0.038157894736842106,
                                                    ('l3', 9): 0.038157894736842106}, doc="Rho values for each link and time frame", mutable=True)
model.q = pyo.Param(model.L, model.h, initialize={('l1', 0): 32,
                                                ('l1', 1): 32,
                                                ('l1', 2): 32,
                                                ('l1', 3): 32,
                                                ('l1', 4): 32,
                                                ('l1', 5): 32,
                                                ('l1', 6): 32,
                                                ('l1', 7): 32,
                                                ('l1', 8): 32,
                                                ('l1', 9): 32,
                                                ('l2', 0): 30,
                                                ('l2', 1): 30,
                                                ('l2', 2): 30,
                                                ('l2', 3): 30,
                                                ('l2', 4): 30,
                                                ('l2', 5): 30,
                                                ('l2', 6): 30,
                                                ('l2', 7): 30,
                                                ('l2', 8): 30,
                                                ('l2', 9): 30,
                                                ('l3', 0): 38,
                                                ('l3', 1): 38,
                                                ('l3', 2): 38,
                                                ('l3', 3): 38,
                                                ('l3', 4): 38,
                                                ('l3', 5): 38,
                                                ('l3', 6): 38,
                                                ('l3', 7): 38,
                                                ('l3', 8): 38,
                                                ('l3', 9): 38}, doc="q values for each link and time frame", mutable=True)
model.n = pyo.Param(model.L, model.d, initialize={('l1', 0): 7,
                                                    ('l1', 1): 9,
                                                    ('l1', 2): 6,
                                                    ('l1', 3): 5,
                                                    ('l1', 4): 8,
                                                    ('l1', 5): 7,
                                                    ('l1', 6): 6,
                                                    ('l1', 7): 5,
                                                    ('l1', 8): 9,
                                                    ('l1', 9): 10,
                                                    ('l1', 10): 6,
                                                    ('l1', 11): 9,
                                                    ('l1', 12): 8,
                                                    ('l1', 13): 9,
                                                    ('l1', 14): 5,
                                                    ('l1', 15): 10,
                                                    ('l1', 16): 5,
                                                    ('l1', 17): 5,
                                                    ('l1', 18): 6,
                                                    ('l1', 19): 8,
                                                    ('l1', 20): 8,
                                                    ('l1', 21): 9,
                                                    ('l1', 22): 7,
                                                    ('l1', 23): 10,
                                                    ('l1', 24): 10,
                                                    ('l1', 25): 6,
                                                    ('l1', 26): 6,
                                                    ('l1', 27): 8,
                                                    ('l1', 28): 10,
                                                    ('l1', 29): 9,
                                                    ('l2', 0): 5,
                                                    ('l2', 1): 5,
                                                    ('l2', 2): 5,
                                                    ('l2', 3): 5,
                                                    ('l2', 4): 5,
                                                    ('l2', 5): 6,
                                                    ('l2', 6): 6,
                                                    ('l2', 7): 10,
                                                    ('l2', 8): 8,
                                                    ('l2', 9): 6,
                                                    ('l2', 10): 8,
                                                    ('l2', 11): 5,
                                                    ('l2', 12): 9,
                                                    ('l2', 13): 8,
                                                    ('l2', 14): 8,
                                                    ('l2', 15): 6,
                                                    ('l2', 16): 7,
                                                    ('l2', 17): 6,
                                                    ('l2', 18): 8,
                                                    ('l2', 19): 10,
                                                    ('l2', 20): 6,
                                                    ('l2', 21): 8,
                                                    ('l2', 22): 8,
                                                    ('l2', 23): 10,
                                                    ('l2', 24): 9,
                                                    ('l2', 25): 8,
                                                    ('l2', 26): 9,
                                                    ('l2', 27): 9,
                                                    ('l2', 28): 10,
                                                    ('l2', 29): 6,
                                                    ('l3', 0): 8,
                                                    ('l3', 1): 7,
                                                    ('l3', 2): 5,
                                                    ('l3', 3): 7,
                                                    ('l3', 4): 9,
                                                    ('l3', 5): 7,
                                                    ('l3', 6): 8,
                                                    ('l3', 7): 10,
                                                    ('l3', 8): 7,
                                                    ('l3', 9): 10,
                                                    ('l3', 10): 8,
                                                    ('l3', 11): 10,
                                                    ('l3', 12): 10,
                                                    ('l3', 13): 10,
                                                    ('l3', 14): 5,
                                                    ('l3', 15): 5,
                                                    ('l3', 16): 6,
                                                    ('l3', 17): 6,
                                                    ('l3', 18): 5,
                                                    ('l3', 19): 10,
                                                    ('l3', 20): 8,
                                                    ('l3', 21): 8,
                                                    ('l3', 22): 10,
                                                    ('l3', 23): 5,
                                                    ('l3', 24): 10,
                                                    ('l3', 25): 7,
                                                    ('l3', 26): 10,
                                                    ('l3', 27): 9,
                                                    ('l3', 28): 10,
                                                    ('l3', 29): 8}, doc="n values for each link and DNL time frame", mutable=True)
model.p = pyo.Param(initialize= 20, doc="Constant parameter p", mutable=True)
model.m = pyo.Param(initialize= 8, doc="Constant parameter m", mutable=True)

#%% Define variables
# Define the decision variable x[v, r, a] for each combination of r, v, and a
model.x = pyo.Var(model.V, model.R, model.paths, within=pyo.Binary, doc="Assignment variable")

model.alpha = pyo.Var(model.V, model.R, model.paths, model.L, model.h, within=pyo.Binary, doc="Link variable")


#%% Define constraints
# Constraint Eq.10 & 11
def eq_10_rule(model, r):
    return sum(model.x[v, r, a] for v in model.Vr[r].value for a in model.paths) <= 1

model.eq_10 = pyo.Constraint(model.R, rule=eq_10_rule, doc="Constraint Eq.10")

# Constraint Eq.12
def eq_12_rule(model):
    min_const = min(model.p.value, model.m.value)
    return sum(model.x[v, r, a] for r in model.R for v in model.Vr[r].value for a in model.paths) == min_const

model.eq_12 = pyo.Constraint(rule=eq_12_rule, doc="Constraint Eq.12")


#%% Define objective function

def objective_rule(model):
    J1 = sum(model.x[v, r, a] * model.beta[v, r, a] 
               for r in model.R
               for v in model.Vr[r].value
               for a in model.paths)
    A = {}
    for l in model.L:
        for h in model.h:
            A[l, h] = sum(model.x[v, r, a] * model.alpha[v, r, a, l, h] 
                        for r in model.R 
                        for v in model.Vr[r].value 
                        for a in model.paths)
    J2 = sum((1 - model.rho[l, h]) * A[l, h] for l in model.L for h in model.h) 
    return J1 + J2 #change to sum instead of min(J1, J2)

# Set the objective
model.objective = pyo.Objective(rule=objective_rule, sense=pyo.minimize)